package example.grpc.client;

/* these are generated by the hello-world-server contract */
import example.grpc.Game;
import example.grpc.GameServiceGrpc;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;

public class GameClient {

	public static void main(String[] args) throws Exception {
		System.out.println(GameClient.class.getSimpleName());

		// receive and print arguments
		System.out.printf("Received %d arguments%n", args.length);
		for (int i = 0; i < args.length; i++) {
			System.out.printf("arg[%d] = %s%n", i, args[i]);
		}

		// check arguments
		if (args.length < 2) {
			System.err.println("Argument(s) missing!");
			System.err.printf("Usage: java %s host port%n", GameClient.class.getName());
			return;
		}

		final String host = args[0];
		final int port = Integer.parseInt(args[1]);
		final String target = host + ":" + port;

		// Channel is the abstraction to connect to a service endpoint
		// Let us use plaintext communication because we do not have certificates
		final ManagedChannel channel = ManagedChannelBuilder.forTarget(target).usePlaintext().build();

		// It is up to the client to determine whether to block the call
		// Here we create a blocking stub, but an async stub,
		// or an async stub with Future are always possible.
		GameServiceGrpc.GameServiceBlockingStub stub0 = GameServiceGrpc.newBlockingStub(channel);
		Game.PlayRequest request0 = Game.PlayRequest.newBuilder().setName("friend").build();

		GameServiceGrpc.HelloWorldServiceBlockingStub stub1 = GameServiceGrpc.newBlockingStub(channel);
		Game.CheckWinnerRequest request1 = Game.CheckWinnerRequest.newBuilder().setName("friend").build();

		GameServiceGrpc.HelloWorldServiceBlockingStub stub2 = HelloWorldServiceGrpc.newBlockingStub(channel);
		Game.CurrentBoardRequest request2 = Game.CurrentBoardRequest.newBuilder().setName("friend").build();

		// Finally, make the call using the stub
		Game.PlayResponse playReq = stub0.checkWinner(PlayRequest.getDefaultInstance()).getResult();
		
		Game.CheckWinnerResponse winnerReq = stub1.checkWinner(CheckWinnerRequest.getDefaultInstance()).getResult();
		
		Game.CurrentBoardResponse boardReq = stub2.checkWinner(CurrentBoardRequest.getDefaultInstance()).getResult();
		// HelloResponse has auto-generated toString method that shows its contents
		System.out.println(playReq);
		System.out.println(winnerReq);
		System.out.println(boardReq);
		
		// A Channel should be shutdown before stopping the process.
		channel.shutdownNow();
	}

}
